name: Build Core

on:
  workflow_dispatch:
    inputs:
      debug_build:
        description: "Build in debug mode instead of release"
        required: false
        default: false
        type: boolean
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+

jobs:
  build_core:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: windows-latest
            target: x86_64-pc-windows-msvc
    name: stable - ${{ matrix.settings.target }} - node@20
    runs-on: ${{ matrix.settings.host }}
    defaults:
      run:
        working-directory: ./core
    outputs:
      tag_name: ${{ steps.get_tag.outputs.tag }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ./core/target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}

      - name: Determine build type
        id: build_type
        run: |
          if [[ "${{ github.event.inputs.debug_build }}" == "true" ]]; then
            echo "type=debug" >> $GITHUB_OUTPUT
          else
            echo "type=release" >> $GITHUB_OUTPUT
          fi

      - name: Build with Cargo
        run: cargo build --${{ steps.build_type.outputs.type }} --target ${{ matrix.settings.target }}
        shell: bash

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: core-${{ matrix.settings.target }}
          path: ./core/target/${{ matrix.settings.target }}/${{ steps.build_type.outputs.type }}/core${{ matrix.settings.target == 'x86_64-pc-windows-msvc' && '.exe' || '' }}
          if-no-files-found: error

  release:
    needs: build_core
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Get release tag name
        id: get_tag
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "prerelease=false" >> $GITHUB_OUTPUT
          else
            TAG="v$(date +%m%d-%H%M)"
            echo "tag=$TAG" >> $GITHUB_OUTPUT
            echo "prerelease=true" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog since last release
        id: changelog
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ || echo "")
          echo "Last tag: $LAST_TAG"
          if [ -n "$LAST_TAG" ]; then
            git log --pretty=format:'* %s (%h)' $LAST_TAG..HEAD > body.md
          else
            echo "Initial release" > body.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          body_path: body.md
          prerelease: ${{ steps.get_tag.outputs.prerelease }}
          files: |
            dist/core-*/core*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
